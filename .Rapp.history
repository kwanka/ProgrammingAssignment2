makeCacheMatrix <- function(x = matrix()) {#
	s <- NULL#
	set <- function(y){#
		x <<- y#
		s <<- NULL#
	}#
	get<-function()x#
	set_inverse<-function(solve) s <<-solve#
	get_inverse<-function() s#
	list(set=set, get=get, set_inverse=set_inverse, get_inverse=get_inverse )#
}
cacheSolve <- function(x, ...) {#
	s <- x$get_inverse()#
	if(!is.null(s)) {#
		message("getting cached data")#
		return(s)#
	}#
	data<-x$get()#
	s<-solve(data,...)#
	x$set_inverse(s)#
	s                   ## Return a matrix that is the inverse of 'x'#
}
katy<-makeCacheMatrix(matrix(1:4,2,2))
katy$get()
katy$get_inverse
katy$get_inverse()
cacheSolve(katy)
katy$get_inverse()
cacheSolve(katy)
my_mat<-matrix(1:9,3,3)
my_mat
my_inv<-solve(my_mat)
my_mat<-matrix(1:25,5,5)
my_mat
my_inv<-solve(my_mat)
my_mat<-matrix(1:16,4,4)
my_mat
my_inv<-solve(my_mat)
my_mat<-matrix(1:4,2,2)
my_mat
my_inv<-solve(my_mat)
my_inv
my_mat<-matrix(c(1,6,7,4,5,9),3,3)
my_mat
my_inv<-solve(my_mat)
my_mat<-matrix(c(5,90,7,24),2,2)
my_mat
my_inv<-solve(my_mat)
my_inv
my_mat<-matrix(c(5,90,7,24),2,2)
katy$set(matrix(c(5,90,7,24),2,2)
katy$set(matrix(c(5,90,7,24),2,2))
cacheSolve(katy)
makeCacheMatrix <- function(x = matrix()) {#
	s <- NULL#
	set <- function(y){#
		x <<- y#
		s <<- NULL#
	}#
	get<-function()x#
	set_inverse<-function(solve) s <<-solve#
	get_inverse<-function() s#
	list(set=set, get=get, set_inverse=set_inverse, get_inverse=get_inverse )#
}
new_matrix<-makeCacheMatrix(matrix(1:4,2,2))
new_matrix$get()
new_matrix$get_inverse()
cacheSolve(new_matrix)
cacheSolve <- function(x, ...) {#
	s <- x$get_inverse()#
	if(!is.null(s)) {#
		message("getting cached data")#
		return(s)#
	}#
	data<-x$get()#
	s<-solve(data,...)#
	x$set_inverse(s)#
	s                   ## Return a matrix that is the inverse of 'x'#
}
cacheSolve(new_matrix)
new_matrix$get()
new_matrix$get_inverse()
cacheSolve(new_matrix)
new_matrix$set(matrix(c(5,90,7,24),2,2))
new_matrix$get_inverse
cacheSolve(new_matrix)
makeCacheMatrix <- function(x = matrix()) {#
	s <- NULL#
	set <- function(y){#
		x <<- y#
		s <<- NULL#
	}#
	get<-function()x#
	set_inverse<-function(solve) s <<-solve#
	get_inverse<-function() s#
	list(set=set, get=get, set_inverse=set_inverse, get_inverse=get_inverse )#
}
new_matrix$set(matrix(c(5,90,7,24),2,2))
new_matrix<-makeCacheMatrix(matrix(1:4,2,2))
new_matrix$set(matrix(c(5,90,7,24),2,2))
new_matrix$get_inverse
cacheSolve(new_matrix)		# calculates and returns the new matrix inversion
makeCacheMatrix <- function(x = matrix()) {#
	s <- NULL#
	set <- function(y){#
		x <<- y#
		s <<- NULL#
	}#
	get<-function()x#
	set_inverse<-function(solve) s <<-solve#
	get_inverse<-function() s#
	list(set=set, get=get, set_inverse=set_inverse,#
	get_inverse=get_inverse )#
}
new_matrix<-makeCacheMatrix(matrix(1:4,2,2))
new_matrix$get()
makeCacheMatrix <- function(x = matrix()) {#
	s <- NULL#
	set <- function(y){#
		x <<- y#
		s <<- NULL#
	}#
	get<-function()x#
	set_inverse<-function(solve) s <<-solve#
	get_inverse<-function() s#
	list(set=set, get=get, set_inverse=set_inverse,#
	get_inverse=get_inverse )#
}
new_matrix<-makeCacheMatrix(matrix(1:4,2,2))
new_matrix$get()
cacheSolve <- function(x, ...) {#
	s <- x$get_inverse()#
	if(!is.null(s)) {#
		message("getting cached data")#
		return(s)#
	}#
	data<-x$get()#
	s<-solve(data,...)#
	x$set_inverse(s)#
	s#
}
new_matrix$get_inverse()
cacheSolve(new_matrix)
new_matrix$get()
new_matrix$get_inverse()
cacheSolve(new_matrix)
new_matrix$set(matrix(c(5,90,7,24),2,2))
cacheSolve(new_matrix)
